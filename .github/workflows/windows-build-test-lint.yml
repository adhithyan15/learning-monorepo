name: Windows Build Test Lint
run-name: Building and Testing changes on Windows ðŸš€

# Trigger the workflow on push events
on: [push]

jobs:
  Windows-Build-Test-Lint:
    # Use the latest Windows runner provided by GitHub Actions
    runs-on: windows-latest

    steps:
      # Informational steps about the trigger and runner
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "ðŸªŸ This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "ðŸ”Ž The branch is ${{ github.ref }} from ${{ github.repository }}."

      # Check out the repository code to the runner
      - name: Check out repository code
        uses: actions/checkout@v4

      # Set up Ruby using the official action, including DevKit for native extensions
      - name: Set up Ruby with DevKit
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3 # Specify your desired Ruby version

      # Main step to install dependencies, check/setup MSVC, and run the build
      - name: Install dependencies, Check/Setup MSVC Env, and Run Build
        # Use PowerShell as the shell for the main logic
        shell: pwsh
        # The script block containing all logic for this step
        run: |
          # ----------------------------------------------------
          # Check for MSVC Prerequisites (Fail Fast)
          # ----------------------------------------------------
          Write-Host "Checking for MSVC prerequisites..."
          
          # Find VS Path using PowerShell
          # Define the arguments clearly for logging (optional but good practice)
          $VsWhereArguments = "-products * -requires Microsoft.Component.MSBuild -property installationPath -latest -nologo"
          Write-Host "==> Executing: vswhere $VsWhereArguments"
          # Call vswhere directly with arguments separated
          $vsPath = vswhere -products * -requires Microsoft.Component.MSBuild -property installationPath -latest -nologo | Where-Object { $_ } | Select-Object -Last 1 
          
          # Check if vswhere returned a valid-looking path (e.g., starting with DriveLetter:\)
          if (-not $vsPath -or $vsPath -notlike "?:\*") { 
            Write-Error "FAIL FAST: vswhere.exe did not return a valid installation path. Output was: '$vsPath'"
            exit 1 # Fail Fast
          }
          Write-Host "Visual Studio path found at $vsPath"
          
          # Construct and Check vcvarsall.bat path
          $vcvarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          Write-Host "==> Checking path existence for: $vcvarsPath"
          # Exit immediately if vcvarsall.bat is not found
          if (-not (Test-Path $vcvarsPath)) {
            Write-Error "FAIL FAST: vcvarsall.bat not found at the expected location: $vcvarsPath"
            exit 1 
          }
          Write-Host "VCVARSALL path confirmed: $vcvarsPath"
          Write-Host "MSVC prerequisites check passed. Proceeding with installations."
          
          # Define architecture needed later (used when calling vcvarsall)
          $arch = "x64" # Change to 'x86' or other values if needed

          # --------------------------
          # Install development tools (Only runs if MSVC checks passed)
          # --------------------------
          Write-Host "Installing development tools..."
          
          Write-Host "==> Executing: go version"
          go version
          
          Write-Host "==> Executing: choco install rust -y"
          choco install rust -y
          
          Write-Host "==> Executing: choco install llvm -y"
          choco install llvm -y
          
          Write-Host "==> Executing: clang -v"
          clang -v
          
          Write-Host "==> Executing: choco install mingw -y"
          choco install mingw -y
          
          Write-Host "==> Executing: gcc --version"
          gcc --version
          
          Write-Host "==> Executing: choco install erlang -y"
          choco install erlang -y
          
          Write-Host "==> Executing: choco install gnucobol -y"
          choco install gnucobol -y
          
          Write-Host "==> Executing: choco install strawberryperl -y"
          choco install strawberryperl -y
          
          Write-Host "==> Executing: choco install haskell-dev -y"
          choco install haskell-dev -y
          
          Write-Host "==> Executing: choco install openjdk -y"
          choco install openjdk -y
          
          Write-Host "==> Executing: choco install zig -y"
          choco install zig -y
          
          Write-Host "==> Executing: dotnet --help"
          dotnet --help
          
          Write-Host "==> Executing: choco install lua -y"
          choco install lua -y
          
          Write-Host "==> Executing: choco install r -y"
          choco install r -y
          
          Write-Host "==> Executing: gem install rspec"
          gem install rspec
          
          Write-Host "==> Executing: npm install -g typescript"
          npm install -g typescript
          
          Write-Host "==> Executing: irm https://deno.land/install.ps1 | iex"
          # Invoke-RestMethod followed by Invoke-Expression to install Deno
          irm https://deno.land/install.ps1 | iex 
          
          Write-Host "==> Executing: npm install -g bun"
          npm install -g bun
          
          Write-Host "==> Executing: cmake --version"
          cmake --version
          
          Write-Host "Development tools installation complete."
          
          # ----------------------------------------------------
          # Run Build within MSVC Env (using info checked earlier)
          # ----------------------------------------------------
          Write-Host "Setting up MSVC environment and running build..."
          # Define the final build command (your Ruby script)
          $buildCommand = "ruby code\programs\ruby\monorepo_build\build.rb"

          # Construct the command string to run within cmd.exe
          # This calls vcvarsall.bat (using the path checked earlier) 
          # and then immediately runs the build command in sequence using '&&'
          $cmdCommand = 'call "' + $vcvarsPath + '" ' + $arch + ' && ' + $buildCommand
          
          # Log the command that will be passed to cmd /c for execution
          Write-Host "==> Executing via cmd /c: $cmdCommand" 
          # Execute the combined command using cmd /c 
          cmd /c "$cmdCommand"
          
          # Check the exit code from the cmd /c execution
          if ($LASTEXITCODE -ne 0) {
            # If the exit code is non-zero, report an error and exit the step with the same code
            Write-Error "Build command failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE 
          } else {
            # If the exit code is zero, report success
            Write-Host "Build completed successfully."
          }